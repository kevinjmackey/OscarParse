//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DVOscarParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DVOscarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ASSOCIATED=1, ATTRIBUTE=2, BEGIN=3, COLON=4, COMMA=5, COUNT=6, DATASTORE=7, 
		DATATYPE=8, BOOLEAN=9, DATE=10, DEFAULT=11, END=12, END_ATTRIBUTE=13, 
		END_DATASTORE=14, END_ITEM=15, EQUAL=16, FALSE=17, CHARACTER=18, FLOAT=19, 
		GUID=20, ITEM=21, KEY=22, LBRACK=23, LCURLY=24, LENGTH=25, LPAREN=26, 
		NULL=27, PLURAL=28, RBRACK=29, RCURLY=30, RPAREN=31, SCALE=32, UNDERSCORE=33, 
		INTEGER=34, MANY_TO_MANY=35, MINUS=36, NUMBER_INT=37, NUMBER_FLOAT=38, 
		NUMBER=39, NUMERIC=40, ONE_TO_ONE=41, PLUS=42, PRECISION=43, STRING=44, 
		STRING_LITERAL=45, TIME=46, DATETIME=47, TRUE=48, IDENTIFIER=49, SPACE=50, 
		COMMENT=51, LINE_COMMENT=52;
	public const int
		RULE_dvoscar_file = 0, RULE_block = 1, RULE_datastore_statement = 2, RULE_parent_item_statement = 3, 
		RULE_item_statement = 4, RULE_child_item_statement = 5, RULE_associations = 6, 
		RULE_association_def = 7, RULE_cardinality = 8, RULE_o2o = 9, RULE_m2m = 10, 
		RULE_from_key = 11, RULE_to_key = 12, RULE_attribute_def = 13, RULE_attrib_properties = 14, 
		RULE_precision_def = 15, RULE_scale_def = 16, RULE_length_def = 17, RULE_default_value = 18, 
		RULE_identifier = 19, RULE_datatype_def = 20, RULE_properties = 21, RULE_property = 22, 
		RULE_pair = 23, RULE_display_name = 24, RULE_plural = 25, RULE_array = 26, 
		RULE_function_call = 27, RULE_arguments = 28, RULE_argument = 29, RULE_value = 30, 
		RULE_integer_value = 31, RULE_constant = 32, RULE_sign = 33;
	public static readonly string[] ruleNames = {
		"dvoscar_file", "block", "datastore_statement", "parent_item_statement", 
		"item_statement", "child_item_statement", "associations", "association_def", 
		"cardinality", "o2o", "m2m", "from_key", "to_key", "attribute_def", "attrib_properties", 
		"precision_def", "scale_def", "length_def", "default_value", "identifier", 
		"datatype_def", "properties", "property", "pair", "display_name", "plural", 
		"array", "function_call", "arguments", "argument", "value", "integer_value", 
		"constant", "sign"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "','", null, null, null, null, null, null, 
		null, null, null, null, "'='", null, null, null, null, null, null, "'['", 
		"'{'", null, "'('", null, null, "']'", "'}'", "')'", null, "'_'", null, 
		null, "'-'", null, null, null, null, null, "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ASSOCIATED", "ATTRIBUTE", "BEGIN", "COLON", "COMMA", "COUNT", "DATASTORE", 
		"DATATYPE", "BOOLEAN", "DATE", "DEFAULT", "END", "END_ATTRIBUTE", "END_DATASTORE", 
		"END_ITEM", "EQUAL", "FALSE", "CHARACTER", "FLOAT", "GUID", "ITEM", "KEY", 
		"LBRACK", "LCURLY", "LENGTH", "LPAREN", "NULL", "PLURAL", "RBRACK", "RCURLY", 
		"RPAREN", "SCALE", "UNDERSCORE", "INTEGER", "MANY_TO_MANY", "MINUS", "NUMBER_INT", 
		"NUMBER_FLOAT", "NUMBER", "NUMERIC", "ONE_TO_ONE", "PLUS", "PRECISION", 
		"STRING", "STRING_LITERAL", "TIME", "DATETIME", "TRUE", "IDENTIFIER", 
		"SPACE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DVOscarParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DVOscarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DVOscarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DVOscarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Dvoscar_fileContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(DVOscarParser.Eof, 0); }
		public Dvoscar_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dvoscar_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDvoscar_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDvoscar_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDvoscar_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dvoscar_fileContext dvoscar_file() {
		Dvoscar_fileContext _localctx = new Dvoscar_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_dvoscar_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; block();
			State = 69; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(DVOscarParser.BEGIN, 0); }
		public Datastore_statementContext datastore_statement() {
			return GetRuleContext<Datastore_statementContext>(0);
		}
		public ITerminalNode END() { return GetToken(DVOscarParser.END, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(BEGIN);
			State = 72; datastore_statement();
			State = 73; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datastore_statementContext : ParserRuleContext {
		public ITerminalNode DATASTORE() { return GetToken(DVOscarParser.DATASTORE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END_DATASTORE() { return GetToken(DVOscarParser.END_DATASTORE, 0); }
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public Parent_item_statementContext[] parent_item_statement() {
			return GetRuleContexts<Parent_item_statementContext>();
		}
		public Parent_item_statementContext parent_item_statement(int i) {
			return GetRuleContext<Parent_item_statementContext>(i);
		}
		public Datastore_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastore_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDatastore_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDatastore_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatastore_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datastore_statementContext datastore_statement() {
		Datastore_statementContext _localctx = new Datastore_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_datastore_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(DATASTORE);
			State = 76; identifier();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 77; display_name();
				}
			}

			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 80; properties();
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 83; parent_item_statement();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ITEM );
			State = 88; Match(END_DATASTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_item_statementContext : ParserRuleContext {
		public Item_statementContext[] item_statement() {
			return GetRuleContexts<Item_statementContext>();
		}
		public Item_statementContext item_statement(int i) {
			return GetRuleContext<Item_statementContext>(i);
		}
		public Parent_item_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_item_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterParent_item_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitParent_item_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent_item_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parent_item_statementContext parent_item_statement() {
		Parent_item_statementContext _localctx = new Parent_item_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_parent_item_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 90; item_statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_statementContext : ParserRuleContext {
		public ITerminalNode ITEM() { return GetToken(DVOscarParser.ITEM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END_ITEM() { return GetToken(DVOscarParser.END_ITEM, 0); }
		public PluralContext plural() {
			return GetRuleContext<PluralContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public AssociationsContext associations() {
			return GetRuleContext<AssociationsContext>(0);
		}
		public Attribute_defContext[] attribute_def() {
			return GetRuleContexts<Attribute_defContext>();
		}
		public Attribute_defContext attribute_def(int i) {
			return GetRuleContext<Attribute_defContext>(i);
		}
		public Child_item_statementContext child_item_statement() {
			return GetRuleContext<Child_item_statementContext>(0);
		}
		public Item_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterItem_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitItem_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_statementContext item_statement() {
		Item_statementContext _localctx = new Item_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_item_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(ITEM);
			State = 96; identifier();
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLURAL) {
				{
				State = 97; plural();
				}
			}

			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 100; display_name();
				}
			}

			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 103; properties();
				}
			}

			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSOCIATED) {
				{
				State = 106; associations();
				}
			}

			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 109; attribute_def();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ITEM) {
				{
				State = 114; child_item_statement();
				}
			}

			State = 117; Match(END_ITEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_item_statementContext : ParserRuleContext {
		public Item_statementContext[] item_statement() {
			return GetRuleContexts<Item_statementContext>();
		}
		public Item_statementContext item_statement(int i) {
			return GetRuleContext<Item_statementContext>(i);
		}
		public Child_item_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_item_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterChild_item_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitChild_item_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChild_item_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Child_item_statementContext child_item_statement() {
		Child_item_statementContext _localctx = new Child_item_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_child_item_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 119; item_statement();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ITEM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationsContext : ParserRuleContext {
		public Association_defContext[] association_def() {
			return GetRuleContexts<Association_defContext>();
		}
		public Association_defContext association_def(int i) {
			return GetRuleContext<Association_defContext>(i);
		}
		public AssociationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAssociations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAssociations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationsContext associations() {
		AssociationsContext _localctx = new AssociationsContext(Context, State);
		EnterRule(_localctx, 12, RULE_associations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 124; association_def();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ASSOCIATED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Association_defContext : ParserRuleContext {
		public ITerminalNode ASSOCIATED() { return GetToken(DVOscarParser.ASSOCIATED, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CardinalityContext cardinality() {
			return GetRuleContext<CardinalityContext>(0);
		}
		public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public Association_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAssociation_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAssociation_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Association_defContext association_def() {
		Association_defContext _localctx = new Association_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_association_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(ASSOCIATED);
			State = 130; identifier();
			State = 131; cardinality();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 132; properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardinalityContext : ParserRuleContext {
		public O2oContext o2o() {
			return GetRuleContext<O2oContext>(0);
		}
		public M2mContext m2m() {
			return GetRuleContext<M2mContext>(0);
		}
		public CardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardinality; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterCardinality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitCardinality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CardinalityContext cardinality() {
		CardinalityContext _localctx = new CardinalityContext(Context, State);
		EnterRule(_localctx, 16, RULE_cardinality);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONE_TO_ONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135; o2o();
				}
				break;
			case MANY_TO_MANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; m2m();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class O2oContext : ParserRuleContext {
		public ITerminalNode ONE_TO_ONE() { return GetToken(DVOscarParser.ONE_TO_ONE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public From_keyContext from_key() {
			return GetRuleContext<From_keyContext>(0);
		}
		public To_keyContext to_key() {
			return GetRuleContext<To_keyContext>(0);
		}
		public O2oContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_o2o; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterO2o(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitO2o(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitO2o(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public O2oContext o2o() {
		O2oContext _localctx = new O2oContext(Context, State);
		EnterRule(_localctx, 18, RULE_o2o);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(ONE_TO_ONE);
			State = 140; identifier();
			State = 141; from_key();
			State = 142; to_key();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M2mContext : ParserRuleContext {
		public ITerminalNode MANY_TO_MANY() { return GetToken(DVOscarParser.MANY_TO_MANY, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public From_keyContext from_key() {
			return GetRuleContext<From_keyContext>(0);
		}
		public To_keyContext to_key() {
			return GetRuleContext<To_keyContext>(0);
		}
		public M2mContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m2m; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterM2m(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitM2m(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitM2m(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public M2mContext m2m() {
		M2mContext _localctx = new M2mContext(Context, State);
		EnterRule(_localctx, 20, RULE_m2m);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(MANY_TO_MANY);
			State = 145; identifier();
			State = 146; from_key();
			State = 147; to_key();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_keyContext : ParserRuleContext {
		public ITerminalNode KEY() { return GetToken(DVOscarParser.KEY, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public From_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterFrom_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitFrom_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_keyContext from_key() {
		From_keyContext _localctx = new From_keyContext(Context, State);
		EnterRule(_localctx, 22, RULE_from_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(KEY);
			State = 150; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class To_keyContext : ParserRuleContext {
		public ITerminalNode KEY() { return GetToken(DVOscarParser.KEY, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public To_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_to_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterTo_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitTo_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public To_keyContext to_key() {
		To_keyContext _localctx = new To_keyContext(Context, State);
		EnterRule(_localctx, 24, RULE_to_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(KEY);
			State = 153; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_defContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attrib_propertiesContext attrib_properties() {
			return GetRuleContext<Attrib_propertiesContext>(0);
		}
		public Attribute_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_defContext attribute_def() {
		Attribute_defContext _localctx = new Attribute_defContext(Context, State);
		EnterRule(_localctx, 26, RULE_attribute_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; identifier();
			State = 156; attrib_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attrib_propertiesContext : ParserRuleContext {
		public Datatype_defContext datatype_def() {
			return GetRuleContext<Datatype_defContext>(0);
		}
		public Length_defContext length_def() {
			return GetRuleContext<Length_defContext>(0);
		}
		public Precision_defContext precision_def() {
			return GetRuleContext<Precision_defContext>(0);
		}
		public Scale_defContext scale_def() {
			return GetRuleContext<Scale_defContext>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Attrib_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib_properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAttrib_properties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAttrib_properties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attrib_propertiesContext attrib_properties() {
		Attrib_propertiesContext _localctx = new Attrib_propertiesContext(Context, State);
		EnterRule(_localctx, 28, RULE_attrib_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; datatype_def();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LENGTH) {
				{
				State = 159; length_def();
				}
			}

			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRECISION) {
				{
				State = 162; precision_def();
				}
			}

			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SCALE) {
				{
				State = 165; scale_def();
				}
			}

			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 168; default_value();
				}
			}

			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 171; properties();
				}
			}

			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 174; display_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_defContext : ParserRuleContext {
		public ITerminalNode PRECISION() { return GetToken(DVOscarParser.PRECISION, 0); }
		public ITerminalNode NUMBER_INT() { return GetToken(DVOscarParser.NUMBER_INT, 0); }
		public Precision_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterPrecision_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitPrecision_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_defContext precision_def() {
		Precision_defContext _localctx = new Precision_defContext(Context, State);
		EnterRule(_localctx, 30, RULE_precision_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(PRECISION);
			State = 178; Match(NUMBER_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scale_defContext : ParserRuleContext {
		public ITerminalNode SCALE() { return GetToken(DVOscarParser.SCALE, 0); }
		public ITerminalNode NUMBER_INT() { return GetToken(DVOscarParser.NUMBER_INT, 0); }
		public Scale_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scale_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterScale_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitScale_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScale_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scale_defContext scale_def() {
		Scale_defContext _localctx = new Scale_defContext(Context, State);
		EnterRule(_localctx, 32, RULE_scale_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(SCALE);
			State = 181; Match(NUMBER_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Length_defContext : ParserRuleContext {
		public ITerminalNode LENGTH() { return GetToken(DVOscarParser.LENGTH, 0); }
		public Integer_valueContext integer_value() {
			return GetRuleContext<Integer_valueContext>(0);
		}
		public Length_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_length_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterLength_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitLength_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLength_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Length_defContext length_def() {
		Length_defContext _localctx = new Length_defContext(Context, State);
		EnterRule(_localctx, 34, RULE_length_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(LENGTH);
			State = 184; integer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(DVOscarParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 36, RULE_default_value);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; Match(DEFAULT);
				State = 187; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; Match(DEFAULT);
				State = 189; function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DVOscarParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype_defContext : ParserRuleContext {
		public ITerminalNode DATATYPE() { return GetToken(DVOscarParser.DATATYPE, 0); }
		public Datatype_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDatatype_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDatatype_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datatype_defContext datatype_def() {
		Datatype_defContext _localctx = new Datatype_defContext(Context, State);
		EnterRule(_localctx, 40, RULE_datatype_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(DATATYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesContext properties() {
		PropertiesContext _localctx = new PropertiesContext(Context, State);
		EnterRule(_localctx, 42, RULE_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 196; property();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LCURLY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public ITerminalNode LCURLY() { return GetToken(DVOscarParser.LCURLY, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode RCURLY() { return GetToken(DVOscarParser.RCURLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DVOscarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DVOscarParser.COMMA, i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 44, RULE_property);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(LCURLY);
				State = 202; pair();
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 203; Match(COMMA);
					State = 204; pair();
					}
					}
					State = 209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 210; Match(RCURLY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; Match(LCURLY);
				State = 213; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		public ITerminalNode COLON() { return GetToken(DVOscarParser.COLON, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 46, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(STRING_LITERAL);
			State = 217; Match(COLON);
			State = 218; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Display_nameContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		public Display_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDisplay_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDisplay_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Display_nameContext display_name() {
		Display_nameContext _localctx = new Display_nameContext(Context, State);
		EnterRule(_localctx, 48, RULE_display_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralContext : ParserRuleContext {
		public ITerminalNode PLURAL() { return GetToken(DVOscarParser.PLURAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		public PluralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plural; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterPlural(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitPlural(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlural(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluralContext plural() {
		PluralContext _localctx = new PluralContext(Context, State);
		EnterRule(_localctx, 50, RULE_plural);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(PLURAL);
			State = 223; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LBRACK() { return GetToken(DVOscarParser.LBRACK, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode RBRACK() { return GetToken(DVOscarParser.RBRACK, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DVOscarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DVOscarParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 52, RULE_array);
		int _la;
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225; Match(LBRACK);
				State = 226; value();
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 227; Match(COMMA);
					State = 228; value();
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 234; Match(RBRACK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; Match(LBRACK);
				State = 237; Match(RBRACK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(DVOscarParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(DVOscarParser.RPAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 54, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; identifier();
			State = 241; Match(LPAREN);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FALSE) | (1L << LBRACK) | (1L << NULL) | (1L << MINUS) | (1L << NUMBER_INT) | (1L << NUMBER_FLOAT) | (1L << PLUS) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 242; arguments();
				}
			}

			State = 245; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DVOscarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DVOscarParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 56, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; argument();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 248; Match(COMMA);
				State = 249; argument();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 58, RULE_argument);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; function_call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode TRUE() { return GetToken(DVOscarParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(DVOscarParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(DVOscarParser.NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_value);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case NUMBER_INT:
			case NUMBER_FLOAT:
			case PLUS:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; constant();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; array();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 262; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 263; Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 264; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_valueContext : ParserRuleContext {
		public ITerminalNode NUMBER_INT() { return GetToken(DVOscarParser.NUMBER_INT, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Integer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterInteger_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitInteger_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_valueContext integer_value() {
		Integer_valueContext _localctx = new Integer_valueContext(Context, State);
		EnterRule(_localctx, 62, RULE_integer_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS || _la==PLUS) {
				{
				State = 267; sign();
				}
			}

			State = 270; Match(NUMBER_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		public Integer_valueContext integer_value() {
			return GetRuleContext<Integer_valueContext>(0);
		}
		public ITerminalNode NUMBER_FLOAT() { return GetToken(DVOscarParser.NUMBER_FLOAT, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 64, RULE_constant);
		int _la;
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(STRING_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; integer_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS || _la==PLUS) {
					{
					State = 274; sign();
					}
				}

				State = 277; Match(NUMBER_FLOAT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(DVOscarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DVOscarParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 66, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==PLUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x11D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 'Q', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'T', '\n', '\x4', '\x3', '\x4', '\x6', '\x4', 'W', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', 'X', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', 
		'\x5', '^', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '_', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x65', '\n', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'h', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 'k', 
		'\n', '\x6', '\x3', '\x6', '\x5', '\x6', 'n', '\n', '\x6', '\x3', '\x6', 
		'\x6', '\x6', 'q', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'r', '\x3', 
		'\x6', '\x5', '\x6', 'v', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x6', '\a', '{', '\n', '\a', '\r', '\a', '\xE', '\a', '|', '\x3', 
		'\b', '\x6', '\b', '\x80', '\n', '\b', '\r', '\b', '\xE', '\b', '\x81', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x88', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8C', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xA3', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\xA6', '\n', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xA9', '\n', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xAC', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\xAF', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB2', '\n', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xC1', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x6', '\x17', '\xC8', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\xC9', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\xD0', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\xD3', '\v', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\xD9', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\xE8', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\xEB', '\v', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\xF1', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\xF6', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\xFD', '\n', '\x1E', 
		'\f', '\x1E', '\xE', '\x1E', '\x100', '\v', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x105', '\n', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x10C', '\n', 
		' ', '\x3', '!', '\x5', '!', '\x10F', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x116', '\n', '\"', 
		'\x3', '\"', '\x5', '\"', '\x119', '\n', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x2', '\x2', '$', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x2', '\x3', '\x4', '\x2', 
		'&', '&', ',', ',', '\x2', '\x120', '\x2', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'I', '\x3', '\x2', '\x2', '\x2', '\x6', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\b', ']', '\x3', '\x2', '\x2', '\x2', '\n', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'z', '\x3', '\x2', '\x2', '\x2', '\xE', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x92', '\x3', '\x2', '\x2', '\x2', '\x18', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xB3', '\x3', '\x2', '\x2', '\x2', '\"', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xB9', '\x3', '\x2', '\x2', '\x2', '&', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xC2', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', ',', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x30', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\x36', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\xF2', '\x3', '\x2', '\x2', '\x2', ':', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x104', '\x3', '\x2', '\x2', '\x2', '>', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x118', '\x3', '\x2', '\x2', '\x2', '\x44', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\x5', '\x4', '\x3', '\x2', 'G', 'H', '\a', 
		'\x2', '\x2', '\x3', 'H', '\x3', '\x3', '\x2', '\x2', '\x2', 'I', 'J', 
		'\a', '\x5', '\x2', '\x2', 'J', 'K', '\x5', '\x6', '\x4', '\x2', 'K', 
		'L', '\a', '\xE', '\x2', '\x2', 'L', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', '\t', '\x2', '\x2', 'N', 'P', '\x5', '(', '\x15', '\x2', 
		'O', 'Q', '\x5', '\x32', '\x1A', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'T', '\x5', ',', '\x17', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'W', '\x5', '\b', '\x5', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '\x10', '\x2', '\x2', '[', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\\', '^', '\x5', '\n', '\x6', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x17', '\x2', '\x2', 
		'\x62', '\x64', '\x5', '(', '\x15', '\x2', '\x63', '\x65', '\x5', '\x34', 
		'\x1B', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'h', '\x5', '\x32', '\x1A', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 
		'i', 'k', '\x5', ',', '\x17', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\x5', '\xE', '\b', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 
		'o', 'q', '\x5', '\x1C', '\xF', '\x2', 'p', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', 
		'\x2', 't', 'v', '\x5', '\f', '\a', '\x2', 'u', 't', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\a', '\x11', '\x2', '\x2', 'x', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'y', '{', '\x5', '\n', '\x6', '\x2', 'z', 'y', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\r', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x80', '\x5', '\x10', '\t', '\x2', '\x7F', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\xF', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\x3', '\x2', '\x2', '\x84', '\x85', '\x5', '(', '\x15', 
		'\x2', '\x85', '\x87', '\x5', '\x12', '\n', '\x2', '\x86', '\x88', '\x5', 
		',', '\x17', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8C', '\x5', '\x14', '\v', '\x2', '\x8A', '\x8C', '\x5', 
		'\x16', '\f', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\a', '+', '\x2', '\x2', '\x8E', '\x8F', '\x5', 
		'(', '\x15', '\x2', '\x8F', '\x90', '\x5', '\x18', '\r', '\x2', '\x90', 
		'\x91', '\x5', '\x1A', '\xE', '\x2', '\x91', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '%', '\x2', '\x2', '\x93', '\x94', '\x5', 
		'(', '\x15', '\x2', '\x94', '\x95', '\x5', '\x18', '\r', '\x2', '\x95', 
		'\x96', '\x5', '\x1A', '\xE', '\x2', '\x96', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\a', '\x18', '\x2', '\x2', '\x98', '\x99', '\x5', 
		'(', '\x15', '\x2', '\x99', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '\x18', '\x2', '\x2', '\x9B', '\x9C', '\x5', '(', '\x15', 
		'\x2', '\x9C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', 
		'(', '\x15', '\x2', '\x9E', '\x9F', '\x5', '\x1E', '\x10', '\x2', '\x9F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x5', '*', '\x16', 
		'\x2', '\xA1', '\xA3', '\x5', '$', '\x13', '\x2', '\xA2', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', '\x5', ' ', '\x11', 
		'\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA9', '\x5', '\"', '\x12', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\x5', '&', '\x14', '\x2', '\xAB', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAF', '\x5', 
		',', '\x17', '\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB2', '\x5', '\x32', '\x1A', '\x2', '\xB1', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '-', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '\'', '\x2', '\x2', '\xB5', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB7', '\a', '\"', '\x2', '\x2', '\xB7', '\xB8', 
		'\a', '\'', '\x2', '\x2', '\xB8', '#', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x1B', '\x2', '\x2', '\xBA', '\xBB', '\x5', '@', '!', '\x2', 
		'\xBB', '%', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\r', '\x2', 
		'\x2', '\xBD', '\xC1', '\x5', '\x42', '\"', '\x2', '\xBE', '\xBF', '\a', 
		'\r', '\x2', '\x2', '\xBF', '\xC1', '\x5', '\x38', '\x1D', '\x2', '\xC0', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\'', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', 
		'\x33', '\x2', '\x2', '\xC3', ')', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC5', '\a', '\n', '\x2', '\x2', '\xC5', '+', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC8', '\x5', '.', '\x18', '\x2', '\xC7', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '-', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1A', 
		'\x2', '\x2', '\xCC', '\xD1', '\x5', '\x30', '\x19', '\x2', '\xCD', '\xCE', 
		'\a', '\a', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\x30', '\x19', '\x2', 
		'\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', ' ', 
		'\x2', '\x2', '\xD5', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\a', '\x1A', '\x2', '\x2', '\xD7', '\xD9', '\a', ' ', '\x2', '\x2', '\xD8', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '/', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'/', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x6', '\x2', '\x2', '\xDC', 
		'\xDD', '\x5', '>', ' ', '\x2', '\xDD', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDF', '\a', '/', '\x2', '\x2', '\xDF', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\x1E', '\x2', '\x2', '\xE1', '\xE2', 
		'\a', '/', '\x2', '\x2', '\xE2', '\x35', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\a', '\x19', '\x2', '\x2', '\xE4', '\xE9', '\x5', '>', ' ', '\x2', 
		'\xE5', '\xE6', '\a', '\a', '\x2', '\x2', '\xE6', '\xE8', '\x5', '>', 
		' ', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\a', '\x1F', '\x2', '\x2', '\xED', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\a', '\x19', '\x2', '\x2', '\xEF', '\xF1', '\a', '\x1F', 
		'\x2', '\x2', '\xF0', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\x5', '(', '\x15', '\x2', '\xF3', '\xF5', '\a', '\x1C', 
		'\x2', '\x2', '\xF4', '\xF6', '\x5', ':', '\x1E', '\x2', '\xF5', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', '!', 
		'\x2', '\x2', '\xF8', '\x39', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFE', 
		'\x5', '<', '\x1F', '\x2', '\xFA', '\xFB', '\a', '\a', '\x2', '\x2', '\xFB', 
		'\xFD', '\x5', '<', '\x1F', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		';', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x105', '\x5', '\x38', '\x1D', '\x2', '\x102', '\x105', 
		'\x5', '(', '\x15', '\x2', '\x103', '\x105', '\x5', '>', ' ', '\x2', '\x104', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x10C', '\x5', '\x42', '\"', '\x2', '\x107', 
		'\x10C', '\x5', '\x36', '\x1C', '\x2', '\x108', '\x10C', '\a', '\x32', 
		'\x2', '\x2', '\x109', '\x10C', '\a', '\x13', '\x2', '\x2', '\x10A', '\x10C', 
		'\a', '\x1D', '\x2', '\x2', '\x10B', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10F', '\x5', '\x44', '#', '\x2', '\x10E', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', 
		'\'', '\x2', '\x2', '\x111', '\x41', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x119', '\a', '/', '\x2', '\x2', '\x113', '\x119', '\x5', '@', '!', '\x2', 
		'\x114', '\x116', '\x5', '\x44', '#', '\x2', '\x115', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x119', '\a', '(', '\x2', 
		'\x2', '\x118', '\x112', '\x3', '\x2', '\x2', '\x2', '\x118', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x43', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\t', '\x2', 
		'\x2', '\x2', '\x11B', '\x45', '\x3', '\x2', '\x2', '\x2', '#', 'P', 'S', 
		'X', '_', '\x64', 'g', 'j', 'm', 'r', 'u', '|', '\x81', '\x87', '\x8B', 
		'\xA2', '\xA5', '\xA8', '\xAB', '\xAE', '\xB1', '\xC0', '\xC9', '\xD1', 
		'\xD8', '\xE9', '\xF0', '\xF5', '\xFE', '\x104', '\x10B', '\x10E', '\x115', 
		'\x118',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
