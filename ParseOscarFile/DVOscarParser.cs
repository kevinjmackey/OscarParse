//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DVOscarParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DVOscarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ASSOCIATED=1, ATTRIBUTE=2, BEGIN=3, COLON=4, COMMA=5, COUNT=6, DATASTORE=7, 
		DATATYPE=8, BOOLEAN=9, DATE=10, DEFAULT=11, END=12, END_ATTRIBUTE=13, 
		END_DATASTORE=14, END_FILTER=15, END_ITEM=16, EQUAL=17, LT=18, LE=19, 
		GT=20, GE=21, NE=22, FALSE=23, FILTER=24, CHARACTER=25, FLOAT=26, GUID=27, 
		ITEM=28, KEY=29, LBRACK=30, LCURLY=31, LENGTH=32, LPAREN=33, NULL=34, 
		PLURAL=35, RBRACK=36, RCURLY=37, RPAREN=38, SCALE=39, UNDERSCORE=40, INTEGER=41, 
		MANY_TO_MANY=42, MANY_TO_ONE=43, MINUS=44, NUMBER_INT=45, NUMBER_FLOAT=46, 
		NUMBER=47, NUMERIC=48, ONE_TO_ONE=49, PLUS=50, PRECISION=51, STRING=52, 
		STRING_LITERAL=53, TIME=54, DATETIME=55, TRUE=56, IDENTIFIER=57, SPACE=58, 
		COMMENT=59, LINE_COMMENT=60;
	public const int
		RULE_dvoscar_file = 0, RULE_block = 1, RULE_datastore_statement = 2, RULE_parent_item_statement = 3, 
		RULE_item_statement = 4, RULE_child_item_statement = 5, RULE_associations = 6, 
		RULE_association_def = 7, RULE_cardinality = 8, RULE_o2o = 9, RULE_m2m = 10, 
		RULE_m2o = 11, RULE_from_key = 12, RULE_to_key = 13, RULE_filter_def = 14, 
		RULE_filter_element = 15, RULE_filter_condition = 16, RULE_attribute_def = 17, 
		RULE_attrib_properties = 18, RULE_precision_def = 19, RULE_scale_def = 20, 
		RULE_length_def = 21, RULE_default_value = 22, RULE_identifier = 23, RULE_datatype_def = 24, 
		RULE_properties = 25, RULE_property = 26, RULE_pair = 27, RULE_display_name = 28, 
		RULE_plural = 29, RULE_array = 30, RULE_function_call = 31, RULE_arguments = 32, 
		RULE_argument = 33, RULE_value = 34, RULE_integer_value = 35, RULE_constant = 36, 
		RULE_sign = 37;
	public static readonly string[] ruleNames = {
		"dvoscar_file", "block", "datastore_statement", "parent_item_statement", 
		"item_statement", "child_item_statement", "associations", "association_def", 
		"cardinality", "o2o", "m2m", "m2o", "from_key", "to_key", "filter_def", 
		"filter_element", "filter_condition", "attribute_def", "attrib_properties", 
		"precision_def", "scale_def", "length_def", "default_value", "identifier", 
		"datatype_def", "properties", "property", "pair", "display_name", "plural", 
		"array", "function_call", "arguments", "argument", "value", "integer_value", 
		"constant", "sign"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "','", null, null, null, null, null, null, 
		null, null, null, null, null, "'='", "'?'", "'<='", "'>'", "'>='", "'!='", 
		null, null, null, null, null, null, null, "'['", "'{'", null, "'('", null, 
		null, "']'", "'}'", "')'", null, "'_'", null, null, null, "'-'", null, 
		null, null, null, null, "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ASSOCIATED", "ATTRIBUTE", "BEGIN", "COLON", "COMMA", "COUNT", "DATASTORE", 
		"DATATYPE", "BOOLEAN", "DATE", "DEFAULT", "END", "END_ATTRIBUTE", "END_DATASTORE", 
		"END_FILTER", "END_ITEM", "EQUAL", "LT", "LE", "GT", "GE", "NE", "FALSE", 
		"FILTER", "CHARACTER", "FLOAT", "GUID", "ITEM", "KEY", "LBRACK", "LCURLY", 
		"LENGTH", "LPAREN", "NULL", "PLURAL", "RBRACK", "RCURLY", "RPAREN", "SCALE", 
		"UNDERSCORE", "INTEGER", "MANY_TO_MANY", "MANY_TO_ONE", "MINUS", "NUMBER_INT", 
		"NUMBER_FLOAT", "NUMBER", "NUMERIC", "ONE_TO_ONE", "PLUS", "PRECISION", 
		"STRING", "STRING_LITERAL", "TIME", "DATETIME", "TRUE", "IDENTIFIER", 
		"SPACE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DVOscarParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DVOscarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DVOscarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DVOscarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Dvoscar_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DVOscarParser.Eof, 0); }
		public Dvoscar_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dvoscar_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDvoscar_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDvoscar_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDvoscar_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dvoscar_fileContext dvoscar_file() {
		Dvoscar_fileContext _localctx = new Dvoscar_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_dvoscar_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			block();
			State = 77;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(DVOscarParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Datastore_statementContext datastore_statement() {
			return GetRuleContext<Datastore_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(DVOscarParser.END, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(BEGIN);
			State = 80;
			datastore_statement();
			State = 81;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datastore_statementContext : ParserRuleContext {
		public Display_nameContext display;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATASTORE() { return GetToken(DVOscarParser.DATASTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_DATASTORE() { return GetToken(DVOscarParser.END_DATASTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parent_item_statementContext[] parent_item_statement() {
			return GetRuleContexts<Parent_item_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parent_item_statementContext parent_item_statement(int i) {
			return GetRuleContext<Parent_item_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Datastore_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastore_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDatastore_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDatastore_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatastore_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datastore_statementContext datastore_statement() {
		Datastore_statementContext _localctx = new Datastore_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_datastore_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(DATASTORE);
			State = 84;
			identifier();
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 85;
				_localctx.display = display_name();
				}
			}

			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 88;
				properties();
				}
			}

			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 91;
				parent_item_statement();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ITEM );
			State = 96;
			Match(END_DATASTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_item_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Item_statementContext[] item_statement() {
			return GetRuleContexts<Item_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_statementContext item_statement(int i) {
			return GetRuleContext<Item_statementContext>(i);
		}
		public Parent_item_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_item_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterParent_item_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitParent_item_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent_item_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parent_item_statementContext parent_item_statement() {
		Parent_item_statementContext _localctx = new Parent_item_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_parent_item_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 98;
					item_statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_statementContext : ParserRuleContext {
		public Display_nameContext display;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEM() { return GetToken(DVOscarParser.ITEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ITEM() { return GetToken(DVOscarParser.END_ITEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PluralContext plural() {
			return GetRuleContext<PluralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationsContext associations() {
			return GetRuleContext<AssociationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_defContext filter_def() {
			return GetRuleContext<Filter_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_defContext[] attribute_def() {
			return GetRuleContexts<Attribute_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_defContext attribute_def(int i) {
			return GetRuleContext<Attribute_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Child_item_statementContext child_item_statement() {
			return GetRuleContext<Child_item_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Item_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterItem_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitItem_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_statementContext item_statement() {
		Item_statementContext _localctx = new Item_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_item_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(ITEM);
			State = 104;
			identifier();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLURAL) {
				{
				State = 105;
				plural();
				}
			}

			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 108;
				_localctx.display = display_name();
				}
			}

			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 111;
				properties();
				}
			}

			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSOCIATED) {
				{
				State = 114;
				associations();
				}
			}

			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER) {
				{
				State = 117;
				filter_def();
				}
			}

			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 120;
				attribute_def();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ITEM) {
				{
				State = 125;
				child_item_statement();
				}
			}

			State = 128;
			Match(END_ITEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_item_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Item_statementContext[] item_statement() {
			return GetRuleContexts<Item_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_statementContext item_statement(int i) {
			return GetRuleContext<Item_statementContext>(i);
		}
		public Child_item_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_item_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterChild_item_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitChild_item_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChild_item_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Child_item_statementContext child_item_statement() {
		Child_item_statementContext _localctx = new Child_item_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_child_item_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 130;
				item_statement();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ITEM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Association_defContext[] association_def() {
			return GetRuleContexts<Association_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Association_defContext association_def(int i) {
			return GetRuleContext<Association_defContext>(i);
		}
		public AssociationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAssociations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAssociations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationsContext associations() {
		AssociationsContext _localctx = new AssociationsContext(Context, State);
		EnterRule(_localctx, 12, RULE_associations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 135;
				association_def();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ASSOCIATED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Association_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATED() { return GetToken(DVOscarParser.ASSOCIATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardinalityContext cardinality() {
			return GetRuleContext<CardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public Association_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAssociation_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAssociation_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Association_defContext association_def() {
		Association_defContext _localctx = new Association_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_association_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(ASSOCIATED);
			State = 141;
			identifier();
			State = 142;
			cardinality();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 143;
				properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public O2oContext o2o() {
			return GetRuleContext<O2oContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public M2mContext m2m() {
			return GetRuleContext<M2mContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public M2oContext m2o() {
			return GetRuleContext<M2oContext>(0);
		}
		public CardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CardinalityContext cardinality() {
		CardinalityContext _localctx = new CardinalityContext(Context, State);
		EnterRule(_localctx, 16, RULE_cardinality);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONE_TO_ONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				o2o();
				}
				break;
			case MANY_TO_MANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				m2m();
				}
				break;
			case MANY_TO_ONE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				m2o();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class O2oContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_TO_ONE() { return GetToken(DVOscarParser.ONE_TO_ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_keyContext from_key() {
			return GetRuleContext<From_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public To_keyContext to_key() {
			return GetRuleContext<To_keyContext>(0);
		}
		public O2oContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_o2o; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterO2o(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitO2o(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitO2o(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public O2oContext o2o() {
		O2oContext _localctx = new O2oContext(Context, State);
		EnterRule(_localctx, 18, RULE_o2o);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(ONE_TO_ONE);
			State = 152;
			identifier();
			State = 153;
			from_key();
			State = 154;
			to_key();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M2mContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANY_TO_MANY() { return GetToken(DVOscarParser.MANY_TO_MANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_keyContext from_key() {
			return GetRuleContext<From_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public To_keyContext to_key() {
			return GetRuleContext<To_keyContext>(0);
		}
		public M2mContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m2m; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterM2m(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitM2m(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitM2m(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public M2mContext m2m() {
		M2mContext _localctx = new M2mContext(Context, State);
		EnterRule(_localctx, 20, RULE_m2m);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(MANY_TO_MANY);
			State = 157;
			identifier();
			State = 158;
			from_key();
			State = 159;
			to_key();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M2oContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANY_TO_ONE() { return GetToken(DVOscarParser.MANY_TO_ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_keyContext from_key() {
			return GetRuleContext<From_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public To_keyContext to_key() {
			return GetRuleContext<To_keyContext>(0);
		}
		public M2oContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m2o; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterM2o(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitM2o(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitM2o(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public M2oContext m2o() {
		M2oContext _localctx = new M2oContext(Context, State);
		EnterRule(_localctx, 22, RULE_m2o);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(MANY_TO_ONE);
			State = 162;
			identifier();
			State = 163;
			from_key();
			State = 164;
			to_key();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(DVOscarParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public From_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterFrom_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitFrom_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_keyContext from_key() {
		From_keyContext _localctx = new From_keyContext(Context, State);
		EnterRule(_localctx, 24, RULE_from_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(KEY);
			State = 167;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class To_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(DVOscarParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public To_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_to_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterTo_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitTo_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public To_keyContext to_key() {
		To_keyContext _localctx = new To_keyContext(Context, State);
		EnterRule(_localctx, 26, RULE_to_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(KEY);
			State = 170;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(DVOscarParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filter_elementContext[] filter_element() {
			return GetRuleContexts<Filter_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_elementContext filter_element(int i) {
			return GetRuleContext<Filter_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FILTER() { return GetToken(DVOscarParser.END_FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DVOscarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DVOscarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public Filter_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterFilter_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitFilter_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_defContext filter_def() {
		Filter_defContext _localctx = new Filter_defContext(Context, State);
		EnterRule(_localctx, 28, RULE_filter_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(FILTER);
			State = 173;
			filter_element();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 174;
				Match(COMMA);
				State = 175;
				filter_element();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 181;
				properties();
				}
			}

			State = 184;
			Match(END_FILTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_elementContext : ParserRuleContext {
		public Display_nameContext display;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_conditionContext filter_condition() {
			return GetRuleContext<Filter_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Filter_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterFilter_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitFilter_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_elementContext filter_element() {
		Filter_elementContext _localctx = new Filter_elementContext(Context, State);
		EnterRule(_localctx, 30, RULE_filter_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			identifier();
			State = 187;
			_localctx.display = display_name();
			State = 188;
			filter_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(DVOscarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DVOscarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(DVOscarParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DVOscarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(DVOscarParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(DVOscarParser.NE, 0); }
		public Filter_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterFilter_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitFilter_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_conditionContext filter_condition() {
		Filter_conditionContext _localctx = new Filter_conditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_filter_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << LE) | (1L << GT) | (1L << GE) | (1L << NE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attrib_propertiesContext attrib_properties() {
			return GetRuleContext<Attrib_propertiesContext>(0);
		}
		public Attribute_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_defContext attribute_def() {
		Attribute_defContext _localctx = new Attribute_defContext(Context, State);
		EnterRule(_localctx, 34, RULE_attribute_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			identifier();
			State = 193;
			attrib_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attrib_propertiesContext : ParserRuleContext {
		public Display_nameContext display;
		[System.Diagnostics.DebuggerNonUserCode] public Datatype_defContext datatype_def() {
			return GetRuleContext<Datatype_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Length_defContext length_def() {
			return GetRuleContext<Length_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precision_defContext precision_def() {
			return GetRuleContext<Precision_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scale_defContext scale_def() {
			return GetRuleContext<Scale_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Attrib_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib_properties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterAttrib_properties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitAttrib_properties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attrib_propertiesContext attrib_properties() {
		Attrib_propertiesContext _localctx = new Attrib_propertiesContext(Context, State);
		EnterRule(_localctx, 36, RULE_attrib_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			datatype_def();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LENGTH) {
				{
				State = 196;
				length_def();
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRECISION) {
				{
				State = 199;
				precision_def();
				}
			}

			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SCALE) {
				{
				State = 202;
				scale_def();
				}
			}

			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 205;
				default_value();
				}
			}

			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 208;
				properties();
				}
			}

			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 211;
				_localctx.display = display_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(DVOscarParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_INT() { return GetToken(DVOscarParser.NUMBER_INT, 0); }
		public Precision_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterPrecision_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitPrecision_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_defContext precision_def() {
		Precision_defContext _localctx = new Precision_defContext(Context, State);
		EnterRule(_localctx, 38, RULE_precision_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(PRECISION);
			State = 215;
			Match(NUMBER_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scale_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(DVOscarParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_INT() { return GetToken(DVOscarParser.NUMBER_INT, 0); }
		public Scale_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scale_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterScale_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitScale_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScale_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scale_defContext scale_def() {
		Scale_defContext _localctx = new Scale_defContext(Context, State);
		EnterRule(_localctx, 40, RULE_scale_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(SCALE);
			State = 218;
			Match(NUMBER_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Length_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(DVOscarParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_valueContext integer_value() {
			return GetRuleContext<Integer_valueContext>(0);
		}
		public Length_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_length_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterLength_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitLength_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLength_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Length_defContext length_def() {
		Length_defContext _localctx = new Length_defContext(Context, State);
		EnterRule(_localctx, 42, RULE_length_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(LENGTH);
			State = 221;
			integer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(DVOscarParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 44, RULE_default_value);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(DEFAULT);
				State = 224;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				Match(DEFAULT);
				State = 226;
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DVOscarParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATATYPE() { return GetToken(DVOscarParser.DATATYPE, 0); }
		public Datatype_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDatatype_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDatatype_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datatype_defContext datatype_def() {
		Datatype_defContext _localctx = new Datatype_defContext(Context, State);
		EnterRule(_localctx, 48, RULE_datatype_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(DATATYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_properties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesContext properties() {
		PropertiesContext _localctx = new PropertiesContext(Context, State);
		EnterRule(_localctx, 50, RULE_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 233;
				property();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LCURLY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(DVOscarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(DVOscarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DVOscarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DVOscarParser.COMMA, i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 52, RULE_property);
		int _la;
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				Match(LCURLY);
				State = 239;
				pair();
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 240;
					Match(COMMA);
					State = 241;
					pair();
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 247;
				Match(RCURLY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				Match(LCURLY);
				State = 250;
				Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DVOscarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 54, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(STRING_LITERAL);
			State = 254;
			Match(COLON);
			State = 255;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Display_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		public Display_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterDisplay_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitDisplay_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Display_nameContext display_name() {
		Display_nameContext _localctx = new Display_nameContext(Context, State);
		EnterRule(_localctx, 56, RULE_display_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLURAL() { return GetToken(DVOscarParser.PLURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		public PluralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plural; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterPlural(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitPlural(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlural(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluralContext plural() {
		PluralContext _localctx = new PluralContext(Context, State);
		EnterRule(_localctx, 58, RULE_plural);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(PLURAL);
			State = 260;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(DVOscarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(DVOscarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DVOscarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DVOscarParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 60, RULE_array);
		int _la;
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				Match(LBRACK);
				State = 263;
				value();
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 264;
					Match(COMMA);
					State = 265;
					value();
					}
					}
					State = 270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 271;
				Match(RBRACK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				Match(LBRACK);
				State = 274;
				Match(RBRACK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DVOscarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DVOscarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 62, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			identifier();
			State = 278;
			Match(LPAREN);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FALSE) | (1L << LBRACK) | (1L << NULL) | (1L << MINUS) | (1L << NUMBER_INT) | (1L << NUMBER_FLOAT) | (1L << PLUS) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 279;
				arguments();
				}
			}

			State = 282;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DVOscarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DVOscarParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			argument();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 285;
				Match(COMMA);
				State = 286;
				argument();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 66, RULE_argument);
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				function_call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(DVOscarParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(DVOscarParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(DVOscarParser.NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_value);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case NUMBER_INT:
			case NUMBER_FLOAT:
			case PLUS:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297;
				constant();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298;
				array();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 299;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 300;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 301;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_INT() { return GetToken(DVOscarParser.NUMBER_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Integer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterInteger_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitInteger_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_valueContext integer_value() {
		Integer_valueContext _localctx = new Integer_valueContext(Context, State);
		EnterRule(_localctx, 70, RULE_integer_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS || _la==PLUS) {
				{
				State = 304;
				sign();
				}
			}

			State = 307;
			Match(NUMBER_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(DVOscarParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_valueContext integer_value() {
			return GetRuleContext<Integer_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_FLOAT() { return GetToken(DVOscarParser.NUMBER_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 72, RULE_constant);
		int _la;
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				Match(STRING_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				integer_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS || _la==PLUS) {
					{
					State = 311;
					sign();
					}
				}

				State = 314;
				Match(NUMBER_FLOAT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DVOscarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DVOscarParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDVOscarParserListener typedListener = listener as IDVOscarParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDVOscarParserVisitor<TResult> typedVisitor = visitor as IDVOscarParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 74, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==PLUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '>', '\x142', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'Y', '\n', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\\', '\n', '\x4', '\x3', '\x4', '\x6', '\x4', '_', 
		'\n', '\x4', '\r', '\x4', '\xE', '\x4', '`', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x6', '\x5', '\x66', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 
		'g', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'm', '\n', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'p', '\n', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 's', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 'v', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'y', '\n', '\x6', '\x3', '\x6', '\x6', '\x6', 
		'|', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '}', '\x3', '\x6', '\x5', 
		'\x6', '\x81', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6', 
		'\a', '\x86', '\n', '\a', '\r', '\a', '\xE', '\a', '\x87', '\x3', '\b', 
		'\x6', '\b', '\x8B', '\n', '\b', '\r', '\b', '\xE', '\b', '\x8C', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x93', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x98', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\xB3', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xB6', '\v', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xB9', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xC8', '\n', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xCB', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\xCE', 
		'\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD1', '\n', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xD4', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xD7', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\xE6', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x6', '\x1B', '\xED', '\n', '\x1B', '\r', 
		'\x1B', '\xE', '\x1B', '\xEE', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\a', '\x1C', '\xF5', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\xF8', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\xFE', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\a', ' ', '\x10D', '\n', ' ', '\f', ' ', '\xE', ' ', '\x110', 
		'\v', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x116', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x11B', 
		'\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\a', '\"', '\x122', '\n', '\"', '\f', '\"', '\xE', '\"', '\x125', '\v', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x12A', '\n', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', 
		'\x131', '\n', '$', '\x3', '%', '\x5', '%', '\x134', '\n', '%', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x13B', 
		'\n', '&', '\x3', '&', '\x5', '&', '\x13E', '\n', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x2', '\x2', '(', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', '\x2', 
		'\x4', '\x3', '\x2', '\x13', '\x18', '\x4', '\x2', '.', '.', '\x34', '\x34', 
		'\x2', '\x145', '\x2', 'N', '\x3', '\x2', '\x2', '\x2', '\x4', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'U', '\x3', '\x2', '\x2', '\x2', '\b', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'i', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x12', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x99', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xAE', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\"', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xC2', '\x3', '\x2', '\x2', '\x2', '&', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xD8', '\x3', '\x2', '\x2', '\x2', '*', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xDE', '\x3', '\x2', '\x2', '\x2', '.', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x34', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x38', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x105', '\x3', '\x2', '\x2', '\x2', '>', '\x115', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x117', '\x3', '\x2', '\x2', '\x2', '\x42', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x130', '\x3', '\x2', '\x2', '\x2', 'H', '\x133', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x13D', '\x3', '\x2', '\x2', '\x2', 'L', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x4', '\x3', '\x2', 'O', 
		'P', '\a', '\x2', '\x2', '\x3', 'P', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\a', '\x5', '\x2', '\x2', 'R', 'S', '\x5', '\x6', '\x4', '\x2', 
		'S', 'T', '\a', '\xE', '\x2', '\x2', 'T', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', '\t', '\x2', '\x2', 'V', 'X', '\x5', '\x30', '\x19', 
		'\x2', 'W', 'Y', '\x5', ':', '\x1E', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\\', '\x5', '\x34', '\x1B', '\x2', '[', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', 
		'\x2', '\x2', '\x2', ']', '_', '\x5', '\b', '\x5', '\x2', '^', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x10', '\x2', 
		'\x2', '\x63', '\a', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x5', 
		'\n', '\x6', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\a', '\x1E', '\x2', '\x2', 'j', 'l', '\x5', '\x30', 
		'\x19', '\x2', 'k', 'm', '\x5', '<', '\x1F', '\x2', 'l', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'p', '\x5', ':', '\x1E', '\x2', 'o', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'q', 's', '\x5', '\x34', '\x1B', '\x2', 'r', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', 
		'\x2', '\x2', '\x2', 't', 'v', '\x5', '\xE', '\b', '\x2', 'u', 't', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'y', '\x5', '\x1E', '\x10', '\x2', 'x', 'w', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 
		'{', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x5', '$', '\x13', '\x2', 
		'{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', 
		'}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', '\x5', '\f', 
		'\a', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x12', '\x2', '\x2', '\x83', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x86', '\x5', '\n', '\x6', '\x2', '\x85', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\r', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', 
		'\x5', '\x10', '\t', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x3', '\x2', '\x2', 
		'\x8F', '\x90', '\x5', '\x30', '\x19', '\x2', '\x90', '\x92', '\x5', '\x12', 
		'\n', '\x2', '\x91', '\x93', '\x5', '\x34', '\x1B', '\x2', '\x92', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x11', '\x3', '\x2', '\x2', '\x2', '\x94', '\x98', '\x5', '\x14', 
		'\v', '\x2', '\x95', '\x98', '\x5', '\x16', '\f', '\x2', '\x96', '\x98', 
		'\x5', '\x18', '\r', '\x2', '\x97', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x13', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\a', '\x33', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\x30', '\x19', '\x2', 
		'\x9B', '\x9C', '\x5', '\x1A', '\xE', '\x2', '\x9C', '\x9D', '\x5', '\x1C', 
		'\xF', '\x2', '\x9D', '\x15', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\a', ',', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\x30', '\x19', '\x2', 
		'\xA0', '\xA1', '\x5', '\x1A', '\xE', '\x2', '\xA1', '\xA2', '\x5', '\x1C', 
		'\xF', '\x2', '\xA2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', 
		'\a', '-', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x30', '\x19', '\x2', 
		'\xA5', '\xA6', '\x5', '\x1A', '\xE', '\x2', '\xA6', '\xA7', '\x5', '\x1C', 
		'\xF', '\x2', '\xA7', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', 
		'\a', '\x1F', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\x30', '\x19', '\x2', 
		'\xAA', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x1F', 
		'\x2', '\x2', '\xAC', '\xAD', '\x5', '\x30', '\x19', '\x2', '\xAD', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x1A', '\x2', '\x2', 
		'\xAF', '\xB4', '\x5', ' ', '\x11', '\x2', '\xB0', '\xB1', '\a', '\a', 
		'\x2', '\x2', '\xB1', '\xB3', '\x5', ' ', '\x11', '\x2', '\xB2', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', '\x5', '\x34', '\x1B', '\x2', 
		'\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', '\x11', '\x2', '\x2', '\xBB', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBD', '\x5', '\x30', '\x19', '\x2', '\xBD', '\xBE', '\x5', ':', 
		'\x1E', '\x2', '\xBE', '\xBF', '\x5', '\"', '\x12', '\x2', '\xBF', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\t', '\x2', '\x2', '\x2', 
		'\xC1', '#', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\x30', 
		'\x19', '\x2', '\xC3', '\xC4', '\x5', '&', '\x14', '\x2', '\xC4', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x32', '\x1A', '\x2', 
		'\xC6', '\xC8', '\x5', ',', '\x17', '\x2', '\xC7', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCB', '\x5', '(', '\x15', '\x2', 
		'\xCA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', 
		'\x5', '*', '\x16', '\x2', '\xCD', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD1', '\x5', '.', '\x18', '\x2', '\xD0', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x34', 
		'\x1B', '\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD7', '\x5', ':', '\x1E', '\x2', '\xD6', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x35', '\x2', '\x2', 
		'\xD9', '\xDA', '\a', '/', '\x2', '\x2', '\xDA', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\a', ')', '\x2', '\x2', '\xDC', '\xDD', '\a', 
		'/', '\x2', '\x2', '\xDD', '+', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\a', '\"', '\x2', '\x2', '\xDF', '\xE0', '\x5', 'H', '%', '\x2', '\xE0', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\r', '\x2', '\x2', 
		'\xE2', '\xE6', '\x5', 'J', '&', '\x2', '\xE3', '\xE4', '\a', '\r', '\x2', 
		'\x2', '\xE4', '\xE6', '\x5', '@', '!', '\x2', '\xE5', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', ';', '\x2', '\x2', 
		'\xE8', '\x31', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', '\n', 
		'\x2', '\x2', '\xEA', '\x33', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', 
		'\x5', '\x36', '\x1C', '\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '!', '\x2', '\x2', '\xF1', 
		'\xF6', '\x5', '\x38', '\x1D', '\x2', '\xF2', '\xF3', '\a', '\a', '\x2', 
		'\x2', '\xF3', '\xF5', '\x5', '\x38', '\x1D', '\x2', '\xF4', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\'', '\x2', '\x2', '\xFA', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '!', '\x2', 
		'\x2', '\xFC', '\xFE', '\a', '\'', '\x2', '\x2', '\xFD', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\x37', '\x2', 
		'\x2', '\x100', '\x101', '\a', '\x6', '\x2', '\x2', '\x101', '\x102', 
		'\x5', '\x46', '$', '\x2', '\x102', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\a', '\x37', '\x2', '\x2', '\x104', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x105', '\x106', '\a', '%', '\x2', '\x2', '\x106', '\x107', 
		'\a', '\x37', '\x2', '\x2', '\x107', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\a', ' ', '\x2', '\x2', '\x109', '\x10E', '\x5', '\x46', 
		'$', '\x2', '\x10A', '\x10B', '\a', '\a', '\x2', '\x2', '\x10B', '\x10D', 
		'\x5', '\x46', '$', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\a', '&', '\x2', '\x2', '\x112', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x114', '\a', ' ', '\x2', '\x2', '\x114', 
		'\x116', '\a', '&', '\x2', '\x2', '\x115', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x116', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x5', '\x30', '\x19', '\x2', '\x118', 
		'\x11A', '\a', '#', '\x2', '\x2', '\x119', '\x11B', '\x5', '\x42', '\"', 
		'\x2', '\x11A', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\a', '(', '\x2', '\x2', '\x11D', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x11E', '\x123', '\x5', '\x44', '#', '\x2', '\x11F', '\x120', 
		'\a', '\a', '\x2', '\x2', '\x120', '\x122', '\x5', '\x44', '#', '\x2', 
		'\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x122', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x126', '\x12A', 
		'\x5', '@', '!', '\x2', '\x127', '\x12A', '\x5', '\x30', '\x19', '\x2', 
		'\x128', '\x12A', '\x5', '\x46', '$', '\x2', '\x129', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x131', '\x5', 'J', '&', '\x2', '\x12C', '\x131', '\x5', 
		'>', ' ', '\x2', '\x12D', '\x131', '\a', ':', '\x2', '\x2', '\x12E', '\x131', 
		'\a', '\x19', '\x2', '\x2', '\x12F', '\x131', '\a', '$', '\x2', '\x2', 
		'\x130', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x131', 'G', '\x3', '\x2', '\x2', '\x2', '\x132', '\x134', '\x5', 
		'L', '\'', '\x2', '\x133', '\x132', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x136', '\a', '/', '\x2', '\x2', '\x136', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x13E', '\a', '\x37', '\x2', '\x2', '\x138', 
		'\x13E', '\x5', 'H', '%', '\x2', '\x139', '\x13B', '\x5', 'L', '\'', '\x2', 
		'\x13A', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13E', '\a', '\x30', '\x2', '\x2', '\x13D', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\t', '\x3', '\x2', '\x2', '\x140', 'M', '\x3', '\x2', 
		'\x2', '\x2', '&', 'X', '[', '`', 'g', 'l', 'o', 'r', 'u', 'x', '}', '\x80', 
		'\x87', '\x8C', '\x92', '\x97', '\xB4', '\xB8', '\xC7', '\xCA', '\xCD', 
		'\xD0', '\xD3', '\xD6', '\xE5', '\xEE', '\xF6', '\xFD', '\x10E', '\x115', 
		'\x11A', '\x123', '\x129', '\x130', '\x133', '\x13A', '\x13D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
